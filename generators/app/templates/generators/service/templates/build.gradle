buildscript {
	ext {
		springBootVersion = '1.5.1.RELEASE'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

jar {
	baseName = '<%= name %>'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8

repositories {
	mavenCentral()

	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

sourceSets {  
    integTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
    }
}

dependencies {
	// health and metrics
	compile('org.springframework.boot:spring-boot-starter-actuator')<%= if (security) { %>

	// security
	compile('org.springframework.boot:spring-boot-starter-security')<% } %>

	// http/web/rest
	compile('org.springframework.boot:spring-boot-starter-web')
	
	// json path traversal
	compile('com.jayway.jsonpath:json-path')

	// developer tools
	runtime('org.springframework.boot:spring-boot-devtools')

	// testing
	testCompile('org.springframework.boot:spring-boot-starter-test')
	
	// integration test compiling
    integTestCompile sourceSets.main.output
    integTestCompile configurations.testCompile
    integTestCompile sourceSets.test.output
    
	// integration testing
    integTestRuntime configurations.testRuntime
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.BUILD-SNAPSHOT"
	}
}

task integTest(type: Test) {  
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
}

check.dependsOn integTest

configure(integTest) {   
    group = 'verification'
    description = 'Runs the integration tests.'
}

bootRun {
	// set the active profile based on arguments
	String activeProfile = System.properties['spring.profiles.active']
	systemProperty "spring.profiles.active", activeProfile
}
